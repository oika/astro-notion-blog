---
import * as interfaces from '../lib/interfaces.ts'
import {
  isTweetURL,
  isAmazonURL,
  buildURLToHTMLMap,
} from '../lib/blog-helpers.ts'
import Paragraph from './notion-blocks/Paragraph.astro'
import Heading1 from './notion-blocks/Heading1.astro'
import Heading2 from './notion-blocks/Heading2.astro'
import Heading3 from './notion-blocks/Heading3.astro'
import TableOfContents from './notion-blocks/TableOfContents.astro'
import Image from './notion-blocks/Image.astro'
import Video from './notion-blocks/Video.astro'
import Code from './notion-blocks/Code.astro'
import Quote from './notion-blocks/Quote.astro'
import Equation from './notion-blocks/Equation.astro'
import Callout from './notion-blocks/Callout.astro'
import Embed from './notion-blocks/Embed.astro'
import Bookmark from './notion-blocks/Bookmark.astro'
import Divider from './notion-blocks/Divider.astro'
import Table from './notion-blocks/Table.astro'
import ColumnList from './notion-blocks/ColumnList.astro'
import BulletedListItems from './notion-blocks/BulletedListItems.astro'
import NumberedListItems from './notion-blocks/NumberedListItems.astro'
import ToDo from './notion-blocks/ToDo.astro'
import SyncedBlock from './notion-blocks/SyncedBlock.astro'
import Toggle from './notion-blocks/Toggle.astro'
import File from './notion-blocks/File.astro'
import LinkToPage from './notion-blocks/LinkToPage.astro'

type Props = {
  blocks: interfaces.Block[]
  isRoot?: undefined
  level?: number
  headings: interfaces.HeadingBlock[]
} | {
  blocks: interfaces.Block[]
  isRoot: true,
  level?: undefined,
  headings?: undefined
}

const {
  blocks: rawBlocks,
  isRoot,
  level,
  headings: rawHeadings,
} = {
  ...Astro.props,
  level: Astro.props.level ?? 1,
  headings: Astro.props.headings ?? []
}

const blocks: Array<interfaces.Block | interfaces.List> = rawBlocks.reduce((arr, block: interfaces.Block, i: number) => {
  const prevList = i === 0 ? undefined : arr[arr.length - 1]

  if (block.Type === 'bulleted_list_item') {
    if (prevList?.Type !== 'bulleted_list') {
      return arr.concat({
        Type: 'bulleted_list',
        ListItems: [block]
      })
    }
    prevList.ListItems.push(block)
    return arr
  }
  
  if (block.Type === 'numbered_list_item') {
    if (prevList?.Type !== 'numbered_list') {
      return arr.concat({
        Type: 'numbered_list',
        ListItems: [block]
      })
    }
    prevList.ListItems.push(block)
    return arr
  }
  
  if (block.Type === 'to_do') {
    if (prevList?.Type !== 'to_do_list') {
      return arr.concat({
        Type: 'to_do_list',
        ListItems: [block]
      })
    }
    prevList.ListItems.push(block)
    return arr
  }
  
  return arr.concat(block)

}, [] as Array<interfaces.Block | interfaces.List>)

let headings = rawHeadings
if (isRoot) {
  const isHeading = (block: interfaces.Block | interfaces.List): block is interfaces.HeadingBlock => {
    return block.Type === 'heading_1'
      || block.Type === 'heading_2'
      || block.Type === 'heading_3'
  }

  headings = blocks.filter(isHeading)
}

const bookmarkURLs: URL[] = blocks.map(b => {
  if (b.Type === 'bookmark') {
    return b.Bookmark.Url
  }
  if (b.Type === 'link_preview') {
    return b.LinkPreview.Url
  }
  if (b.Type === 'embed') {
    return b.Embed.Url
  }
  return undefined
}
  ).map(urlString => urlString ? new URL(urlString) : undefined)
    .filter((url): url is URL => url != null && !isTweetURL(url) && !isAmazonURL(url))

const bookmarkURLMap = await buildURLToHTMLMap(bookmarkURLs)
---

{
  blocks.map(block => {
    switch (block.Type) {
      case 'paragraph':
        return <Paragraph block={block} headings={headings} />
      case 'heading_1':
        return <Heading1 block={block} headings={headings} />
      case 'heading_2':
        return <Heading2 block={block} headings={headings} />
      case 'heading_3':
        return <Heading3 block={block} headings={headings} />
      case 'table_of_contents':
        return <TableOfContents block={block} headings={headings} />
      case 'image':
        return <Image block={block} />
      case 'video':
        return <Video block={block} />
      case 'code':
        return <Code block={block} />
      case 'quote':
        return <Quote block={block} headings={headings} />
      case 'equation':
        return <Equation block={block} />
      case 'callout':
        return <Callout block={block} headings={headings} />
      case 'embed':
        return <Embed block={block} urlMap={bookmarkURLMap} />
      case 'bookmark':
      case 'link_preview':
        return <Bookmark block={block} urlMap={bookmarkURLMap} />
      case 'divider':
        return <Divider />
      case 'table':
        return <Table block={block} />
      case 'column_list':
        return <ColumnList block={block} headings={headings} />
      case 'bulleted_list':
        return <BulletedListItems block={block} headings={headings} />
      case 'numbered_list':
        return (
          <NumberedListItems block={block} level={level} headings={headings} />
        )
      case 'to_do_list':
        return <ToDo block={block} headings={headings} />
      case 'synced_block':
        return <SyncedBlock block={block} headings={headings} />
      case 'toggle':
        return <Toggle block={block} headings={headings} />
      case 'file':
        return <File block={block} />
      case 'link_to_page':
        return <LinkToPage block={block} />
    }
    return null
  })
}
