---
import * as interfaces from '../../../lib/interfaces'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../../lib/notion/client'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../../lib/blog-helpers'
import Layout from '../../../layouts/Layout.astro'
import PostDate from '../../../components/PostDate.astro'
import PostTags from '../../../components/PostTags.astro'
import PostTitle from '../../../components/PostTitle.astro'
import PostBody from '../../../components/PostBody.astro'
import PostRelativeLink from '../../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../../components/BlogTagsLink.astro'
import styles from '../../../styles/blog.module.css'
import { HEADING, LANGUAGE_KEYS, LanguageKey } from '../../../content-constants'
import { FileBlock, ImageBlock } from '../../../lib/interfaces'
import PostFeaturedImage from '../../../components/PostFeaturedImage.astro'
import { SETTING } from '../../../setting'

export async function getStaticPaths() {
  const paths: { params: { slug: string; lang: LanguageKey } }[] = []
  for (const lang of LANGUAGE_KEYS) {
    const posts = await getAllPosts(lang)
    paths.push(...posts.map((post) => ({ params: { slug: post.Slug, lang } })))
  }
  return paths
}

const { slug, lang } = Astro.params

const post = await getPostBySlug(lang, slug)
if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(lang),
    getRankedPosts(lang),
    getPosts(lang, 5),
    getAllTags(lang),
    getPostsByTag(lang, post.Tags[0]?.name, 6),
  ])

const fileAtacchedBlocks: Array<ImageBlock | FileBlock> = extractTargetBlocks(
  'image',
  blocks
)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block): block is ImageBlock | FileBlock => {
    if (!block) {
      return false
    }
    const imageOrFile =
      block.Type === 'image'
        ? block.Image
        : block.Type === 'file'
          ? block.File
          : undefined
    return (imageOrFile?.File?.Url ?? '') !== ''
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const file = block.Type === 'image' ? block.Image.File : block.File.File
      const expiryTime = file!.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          const file =
            block.Type === 'image'
              ? block.Image.File
              : block.Type === 'file'
                ? block.File.File
                : undefined
          url = new URL(file?.Url ?? '')
        } catch (err) {
          console.log('Invalid file URL')
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site).href
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(lang, post.Slug)}
  ogImage={ogImage}
>
  <div slot="main" class={styles.main}>
    <div class={styles.post}>
      <PostDate post={post} />
      <PostTags post={post} />
      <PostTitle post={post} enableLink={false} />
      {
        SETTING.layout.showsFeaturedImageInPostPage && (
          <PostFeaturedImage post={post} />
        )
      }
      <PostBody blocks={blocks} />
      <PostTags post={post} />

      <footer>
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </footer>
    </div>
  </div>

  <div slot="aside" class="aside">
    <BlogPostsLink
      heading={HEADING[lang].SAME_CATEGORY}
      posts={postsHavingSameTag.filter(
        (p: interfaces.Post) => p.Slug !== post.Slug
      )}
    />
    <BlogPostsLink heading={HEADING[lang].RECOMMENDED} posts={rankedPosts} />
    <BlogPostsLink heading={HEADING[lang].RECENT} posts={recentPosts} />
    <BlogTagsLink heading={HEADING[lang].CATEGORIES} tags={tags} />
  </div>
</Layout>
